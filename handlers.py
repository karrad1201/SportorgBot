# bot/handlers.py
import utils, database, config, products
from config import BAD_WORDS
from database import connection
from telebot import types
from telebot.apihelper import ApiTelegramException
from threading import Lock
import sqlite3
import random
import os
import logging
from logger_config import transactions_logger, errors_logger


bot = utils.bot

db_lock = Lock()
TRAINERS_PER_PAGE = 1

current_review_index = 0
reviews_list = []



@bot.message_handler(commands=['start'])
def start_handler(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        name = message.from_user.first_name

        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        added = database.add_user(user_id, chat_id, name)
        if added:
            print(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_id}, Chat ID={chat_id}, Name={name}")
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID={user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup()
        btn_info = types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='info')
        markup.add(btn_info)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ***{name}***! –Ø Millenium - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è: \n\n  üõí –ü–æ–∫—É–ø–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª \n\n  üí≤ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω \n\n  üÜò***–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã:*** @KarrradM "
        message_id = utils.send_and_save_message(chat_id, text, reply_markup=markup, parse_mode="Markdown")
        utils.delete_message(chat_id, message.message_id)

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}", exc_info=True)

@bot.callback_query_handler(func=lambda call: call.data == 'info')
def info_handler(call):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ."""
    try:
        markup = types.InlineKeyboardMarkup()
        btntren = types.InlineKeyboardButton(f'üí™ –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤', callback_data='trainers')
        ###btnfrz = types.InlineKeyboardButton(f'‚ùÑÔ∏è–ó–∞–º–æ—Ä–æ–∑–∫–∞', callback_data='freeze')
        btninfacc = types.InlineKeyboardButton(f'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='account')
        btnbuy = types.InlineKeyboardButton(f'üìã –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', callback_data='buy')
        ###btncall = types.InlineKeyboardButton(f'‚òéÔ∏è –°–≤—è–∑—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º', callback_data='call')
        btnball = types.InlineKeyboardButton(f'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='balance')
        btnrecall = types.InlineKeyboardButton(f'üñã –û—Ç–∑—ã–≤—ã –ª—é–¥–µ–π', callback_data='recall')
        btnmyclasses = types.InlineKeyboardButton(f'üìÖ –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è', callback_data='my_classes')  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        markup.row(btninfacc, btnball)
        markup.row(btntren, btnmyclasses)
        markup.row(btnbuy, btnrecall)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é

        text = f' ü§ñ***–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞*** \nüÜò***–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã:*** @KarrradM'
        utils.delete_message(call.message.chat.id, call.message.message_id)
        utils.send_and_save_message(call.message.chat.id, text, reply_markup=markup, parse_mode="Markdown")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ info_handler: {e}", exc_info=True)


@bot.callback_query_handler(func=lambda call: call.data == 'account')
def account_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'."""
    try:
        user_id = call.from_user.id
        user_data = database.get_user(user_id)

        if user_data:
            name = user_data[2]  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            balance = user_data[3]  # –ë–∞–ª–∞–Ω—Å
            phone = user_data[4] if user_data[4] else "–ù–µ —É–∫–∞–∑–∞–Ω"  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            avatar_path = user_data[5]  # –ü—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä–∫–µ

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
            text = f"üë§ *–ò–º—è:* {name}\n"
            text += f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance}\n"
            text += f"üìû *–ù–æ–º–µ—Ä:* {phone}"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.InlineKeyboardMarkup()
            btn_edit = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='edit_profile')
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
            markup.row(btn_edit, btn_back)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –µ—Å—Ç—å
            if avatar_path and os.path.exists(avatar_path):
                with open(avatar_path, 'rb') as photo:
                    utils.delete_message(call.message.chat.id, call.message.message_id)
                    bot.send_photo(call.message.chat.id, photo, caption=text, reply_markup=markup, parse_mode="Markdown")
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                markup_add_photo = types.InlineKeyboardMarkup()
                btn_add_photo = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='edit_avatar')
                btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
                markup_add_photo.row(btn_add_photo, btn_back)

                utils.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, text + "\n\n‚ùå –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=markup_add_photo, parse_mode="Markdown")
        else:
            utils.send_and_save_message(call.message.chat.id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ account_handler: {e}", exc_info=True)



@bot.callback_query_handler(func=lambda call: call.data == 'trainings')
def trainings_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ'."""
    try:
        markup = types.InlineKeyboardMarkup()
        for training_id, training in products.TRAININGS.items():
            btn = types.InlineKeyboardButton(training['name'], callback_data=f"selecttraining_{training_id}")
            markup.add(btn)
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back3")  # –í–æ–∑–≤—Ä–∞—Ç –∫ buying_handler
        markup.add(btn_back)

        utils.delete_message(call.message.chat.id, call.message.message_id)
        utils.send_and_save_message(call.message.chat.id, "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ:", reply_markup=markup, parse_mode="Markdown")
    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ trainings_handler: {e}", exc_info=True)

@bot.callback_query_handler(func=lambda call: call.data == 'edit_profile')
def edit_profile_handler2(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å'."""
    try:
        markup = types.InlineKeyboardMarkup()
        btn_edit_name = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data='edit_name')
        btn_edit_phone = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä', callback_data='edit_phone')
        btn_edit_avatar = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='edit_avatar')
        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back7')
        markup.add(btn_edit_name, btn_edit_phone)
        markup.add(btn_edit_avatar, btn_back)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        print(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {call.message.chat.id}")
        utils.delete_message(call.message.chat.id, call.message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        utils.send_and_save_message(call.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_profile_handler2: {e}", exc_info=True)

@bot.callback_query_handler(func=lambda call: call.data == 'edit_name')
def edit_name_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'."""
    try:
        utils.delete_message(call.message.chat.id, call.message.message_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º message_id
        bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        bot.register_next_step_handler(call.message, process_new_name)
    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_name_handler: {e}", exc_info=True)
def process_new_name(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏."""
    user_id = message.from_user.id
    new_name = message.text

    if database.update_user_name(user_id, new_name):
        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back7')
        markup.add(btn_back)
        utils.send_and_save_message(message.chat.id, "‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=markup)
    else:
        utils.send_and_save_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.")

@bot.callback_query_handler(func=lambda call: call.data == 'edit_phone')
def edit_phone_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä'."""
    try:
        utils.delete_message(call.message.chat.id, call.message.message_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º message_id
        bot.send_message(call.message.chat.id, "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(call.message, process_new_phone)
    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_phone_handler: {e}", exc_info=True)

def process_new_phone(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    user_id = message.from_user.id
    new_phone = message.text

    if database.update_user_phone(user_id, new_phone):
        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back7')
        markup.add(btn_back)
        utils.send_and_save_message(message.chat.id, "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=markup)
    else:
        utils.send_and_save_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")


@bot.callback_query_handler(func=lambda call: call.data == 'edit_avatar')
def edit_avatar_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ'."""
    try:
        markup = types.InlineKeyboardMarkup()
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        utils.delete_message(call.message.chat.id, call.message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        bot.send_message(call.message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:")
        bot.register_next_step_handler(call.message, process_new_avatar)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back7')
        markup.add(btn_back)

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_avatar_handler: {e}", exc_info=True)

def process_new_avatar(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è."""
    user_id = message.from_user.id
    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        user_data = database.get_user(user_id)
        if user_data and user_data[5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ
            utils.delete_avatar(user_data[5])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        file_extension = file_info.file_path.split('.')[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        avatar_path = f"avatar/{user_id}.{file_extension}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(avatar_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if database.update_user_avatar(user_id, avatar_path):
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back7')
            markup.add(btn_back)
            utils.send_and_save_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=markup)
        else:
            utils.send_and_save_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è.")
    else:
        utils.send_and_save_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")

@bot.callback_query_handler(func=lambda call: call.data == '')
def edit_profile_handler1(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å'."""
    try:
        markup = types.InlineKeyboardMarkup()
        btn_edit_name = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data='edit_name')
        btn_edit_phone = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä', callback_data='edit_phone')
        btn_edit_avatar = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='edit_avatar')
        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
        markup.add(btn_edit_name, btn_edit_phone, btn_edit_avatar, btn_back)

        utils.delete_message(call.message.chat.id, call.message.message_id)
        utils.send_and_save_message(call.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_profile_handler1: {e}", exc_info=True)

def get_trainers_page(page_num):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    trainers = list(products.TRAINERS.values())
    start_index = (page_num - 1) * TRAINERS_PER_PAGE
    end_index = start_index + TRAINERS_PER_PAGE
    return trainers[start_index:end_index]

def format_trainer(trainer):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    fio = trainer['fio']
    name = trainer['name']
    description = trainer['description']
    vk_link = trainer['vk_link']
    telegram_link = trainer['telegram_link']
    photo = trainer['photo']  # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ –∏ —ç–º–æ–¥–∑–∏
    message_text = f"<b>üí™ {fio}</b>\n"  # –§–ò–û –≤—ã–¥–µ–ª–µ–Ω–æ –∂–∏—Ä–Ω—ã–º –∏ –¥–æ–±–∞–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏
    message_text += f"<i>{name}</i>\n\n"  # –ò–º—è –≤—ã–¥–µ–ª–µ–Ω–æ –∫—É—Ä—Å–∏–≤–æ–º –∏ –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø

    message_text += f"‚≠ê <i>–û–ø—ã—Ç –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</i>\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
    message_text += f"{description}\n\n"  # –û–ø–∏—Å–∞–Ω–∏–µ —Å –æ—Ç—Å—Ç—É–ø–æ–º

    message_text += f"üîó <b>–°–≤—è–∑–∞—Ç—å—Å—è:</b>\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Å—ã–ª–æ–∫
    message_text += f"üîµ–í–ö–æ–Ω—Ç–∞–∫—Ç–µ: <a href=\"{vk_link}\">–ü–µ—Ä–µ–π—Ç–∏</a> ‚ÜóÔ∏è\n"  # –°—Å—ã–ª–∫–∞ –Ω–∞ VK —Å —ç–º–æ–¥–∑–∏
    message_text += f"üîµTelegram: <a href=\"{telegram_link}\">–ù–∞–ø–∏—Å–∞—Ç—å</a> ‚úâÔ∏è\n"  # –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram —Å —ç–º–æ–¥–∑–∏
    return message_text, photo


@bot.callback_query_handler(func=lambda call: call.data == 'recall')
def recall_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–∑—ã–≤—ã'."""
    global current_review_index, reviews_list

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    utils.delete_message(call.message.chat.id, call.message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    reviews_list = database.get_all_reviews()

    if not reviews_list:
        # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
        markup = types.InlineKeyboardMarkup()
        btn_write_review = types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', callback_data='write_review')
        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
        markup.add(btn_write_review, btn_back)
        utils.send_and_save_message(call.message.chat.id, "‚ùå –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤—ã –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–∑—ã–≤
        current_review_index = random.randint(0, len(reviews_list) - 1)
        show_review(call.message.chat.id, current_review_index, call.message.message_id)  # –ü–µ—Ä–µ–¥–∞–µ–º message_id

def show_review(chat_id, review_index, message_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
    global reviews_list

    review = reviews_list[review_index]
    user_id = review[1]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –æ—Ç–∑—ã–≤
    user_data = database.get_user(user_id)
    user_name = user_data[2] if user_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    review_text = f"üìù –û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}:\n\n{review[2]}"

    markup = types.InlineKeyboardMarkup()
    btn_prev = types.InlineKeyboardButton('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='prev_review')
    btn_next = types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è', callback_data='next_review')
    btn_write_review = types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', callback_data='write_review')
    btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
    markup.add(btn_prev, btn_next)
    markup.add(btn_write_review, btn_back)

    utils.delete_message(chat_id, message_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π message_id
    utils.send_and_save_message(chat_id, review_text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'next_review')
def next_review_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∏–π'."""
    global current_review_index, reviews_list

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–∑—ã–≤
    current_review_index = random.randint(0, len(reviews_list) - 1)
    show_review(call.message.chat.id, current_review_index, call.message.message_id)  # –ü–ï–†–ï–î–ê–ï–ú message_id

@bot.callback_query_handler(func=lambda call: call.data == 'prev_review')
def prev_review_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥—ã–¥—É—â–∏–π'."""
    global current_review_index, reviews_list

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–∑—ã–≤
    current_review_index = (current_review_index - 1) % len(reviews_list)
    show_review(call.message.chat.id, current_review_index, call.message.message_id)  # –ü–ï–†–ï–î–ê–ï–ú message_id

@bot.callback_query_handler(func=lambda call: call.data == 'write_review')
def write_review_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤'."""
    utils.delete_message(call.message.chat.id, call.message.message_id) # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(call.message.chat.id, "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(call.message, process_review)



def contains_bad_word(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."""
    text = text.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for word in BAD_WORDS:
        if word in text:
            return True
    return False

def process_review(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç–∑—ã–≤–∞."""
    user_id = message.from_user.id
    review_text = message.text

    if not database.check_review_cooldown(user_id):
        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
        markup.add(btn_back)
        utils.send_and_save_message(message.chat.id, "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ –≤ —Å—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", reply_markup=markup)
        return

    if contains_bad_word(review_text):
        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
        markup.add(btn_back)

        utils.send_and_save_message(message.chat.id, "‚ùå –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=markup)
        return

    if database.add_review(user_id, review_text):
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        utils.delete_message(message.chat.id, message.message_id)  # –ü–µ—Ä–µ–¥–∞–µ–º message_id

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
        markup.add(btn_back)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞
        utils.send_and_save_message(message.chat.id, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=markup)
    else:
        utils.send_and_save_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.")


@bot.callback_query_handler(func=lambda call: call.data == 'my_classes')
def my_classes_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –ó–∞–Ω—è—Ç–∏—è'."""
    try:
        user_id = call.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
        abonements = database.get_user_abonements(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "‚è≥ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã:\n\n"
        if abonements:
            for abonement in abonements:
                abonement_id = abonement[0]
                end_date = abonement[1]
                visits_left = abonement[2]
                abonement_info = products.ABONEMENTS.get(abonement_id)
                train_info = products.TRAININGS.get(abonement_id)
                if abonement_info:
                    text += f"- {abonement_info['name']} (–¥–æ {end_date}"
                    if 'visits' in abonement_info:
                        text += f", –æ—Å—Ç–∞–ª–æ—Å—å {visits_left} –ø–æ—Å–µ—â–µ–Ω–∏–π)\n"
                    else:
                        text += ")\n"  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
                elif train_info:
                    text += f"- {train_info['name']} (–¥–æ {end_date})\n"
                else:
                    text += f"- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç (–¥–æ {end_date})\n"
        else:
            text += "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.\n"

        markup = types.InlineKeyboardMarkup()
        btn_history = types.InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –ü–æ—Å–µ—â–µ–Ω–∏–π", callback_data="visits_history")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back2")
        markup.add(btn_history)
        markup.add(btn_back)

        utils.delete_message(call.message.chat.id, call.message.message_id)
        utils.send_and_save_message(call.message.chat.id, text, reply_markup=markup, parse_mode="Markdown")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ my_classes_handler: {e}", exc_info=True)

@bot.callback_query_handler(func=lambda call: call.data == 'visits_history')
def visits_history_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—Ä–∏—è –ü–æ—Å–µ—â–µ–Ω–∏–π'."""
    try:
        user_id = call.from_user.id
        visits = database.get_visits(user_id)

        if visits:
            message_text = "üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π:\n"
            for timestamp, description in visits:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã Markdown –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                description = description.replace("*", "\\*").replace("_", "\\_").replace("`", "\\`")
                message_text += f"- {timestamp}: {description}\n"
        else:
            message_text = "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö."

        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
        markup.add(btn_back)

        utils.delete_message(call.message.chat.id, call.message.message_id)
        utils.send_and_save_message(call.message.chat.id, message_text, reply_markup=markup, parse_mode="Markdown")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ visits_history_handler: {e}", exc_info=True)



@bot.callback_query_handler(func=lambda call: call.data == 'trainers')
def trainers_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤'."""
    try:
        chat_id = call.message.chat.id
        page_num = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        trainers = get_trainers_page(page_num)
        total_trainers = len(products.TRAINERS)
        total_pages = (total_trainers + TRAINERS_PER_PAGE - 1) // TRAINERS_PER_PAGE  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

        markup = types.InlineKeyboardMarkup()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥" –∏ "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if total_pages > 1:
            if page_num > 1:
                btn_prev = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'trainers_page_{page_num - 1}_{call.message.message_id}')
                markup.add(btn_prev)
            if page_num < total_pages:
                btn_next = types.InlineKeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data=f'trainers_page_{page_num + 1}_{call.message.message_id}')
                markup.add(btn_next)

        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
        markup.add(btn_back)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(chat_id, call.message.message_id)
        except ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ trainers_handler: {e}")

        if trainers:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–Ω–µ—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º —Ç—Ä–µ–Ω–µ—Ä–µ
            trainer = trainers[0]
            if trainer:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ trainer –Ω–µ None
                trainer_text, trainer_photo = format_trainer(trainer)
                if trainer_text and trainer_photo:
                    try:
                        with open(trainer_photo, 'rb') as photo:
                            bot.send_photo(chat_id, photo=photo, caption=trainer_text, parse_mode="HTML", reply_markup=markup)
                    except FileNotFoundError:
                        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {trainer_photo} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        utils.send_and_save_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –§–æ—Ç–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=markup, parse_mode="HTML")
                else:
                    utils.send_and_save_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–∞.", reply_markup=markup, parse_mode="HTML")
            else:
                utils.send_and_save_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–Ω–µ—Ä–µ.", reply_markup=markup, parse_mode="HTML")
        else:
            utils.send_and_save_message(chat_id, "‚ùå –ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=markup, parse_mode="HTML")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ trainers_handler: {e}", exc_info=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith('trainers_page_'))
def trainers_page_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ '–í–ø–µ—Ä–µ–¥' –∏ '–ù–∞–∑–∞–¥'."""
    try:
        chat_id = call.message.chat.id
        data = call.data.split('_')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if len(data) < 4:
            print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_{call.data}")
            return

        page_num = int(data[2])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        try:
            old_message_id = int(data[3])  # –ü–æ–ª—É—á–∞–µ–º message_id –∏–∑ callback_data
        except (IndexError, ValueError):
            print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç message_id: {call.data}")
            old_message_id = None

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if old_message_id:
            try:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ trainers_page_handler —Å ID: {call.message.message_id}")
                bot.delete_message(chat_id, call.message.message_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º call.message.message_id
            except ApiTelegramException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        trainers = get_trainers_page(page_num)
        total_trainers = len(products.TRAINERS)
        total_pages = (total_trainers + TRAINERS_PER_PAGE - 1) // TRAINERS_PER_PAGE

        markup = types.InlineKeyboardMarkup()
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page_num > 1:
            btn_prev = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'trainers_page_{page_num - 1}_{call.message.message_id}')
            buttons.append(btn_prev)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page_num < total_pages:
            btn_next = types.InlineKeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data=f'trainers_page_{page_num + 1}_{call.message.message_id}')
            buttons.append(btn_next)
        if buttons:
            markup.row(*buttons)

        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
        markup.add(btn_back)

        if trainers:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–Ω–µ—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º —Ç—Ä–µ–Ω–µ—Ä–µ
            trainer_text, trainer_photo = format_trainer(trainers[0])
            with open(trainer_photo, 'rb') as photo:
                sent_message = bot.send_photo(chat_id, photo=photo, caption=trainer_text, parse_mode="HTML",
                                              reply_markup=markup)
                # utils.send_and_save_message(chat_id, text=trainer_text, photo=photo, reply_markup=markup, parse_mode="HTML")
        else:
            sent_message = utils.send_and_save_message(chat_id, "‚ùå –ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=markup,
                                                       parse_mode="HTML")
    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ trainers_page_handler: {e}", exc_info=True)

@bot.callback_query_handler(func=lambda call: call.data == 'noop')
def noop_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—é—Ç."""
    bot.answer_callback_query(call.id)  # –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
@bot.callback_query_handler(func=lambda call: call.data == 'buy')
def buying_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç'."""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
        markup = types.InlineKeyboardMarkup()
        btn_abonements = types.InlineKeyboardButton("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã", callback_data="abonements")
        btn_trainings = types.InlineKeyboardButton("–†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ", callback_data="trainings")
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back2")
        markup.add(btn_abonements)
        markup.add(btn_trainings)
        markup.add(btn_back)

        utils.delete_message(call.message.chat.id, call.message.message_id)
        utils.send_and_save_message(call.message.chat.id, "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup,
                                    parse_mode="Markdown")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ buying_handler: {e}", exc_info=True)


@bot.callback_query_handler(func=lambda call: call.data == 'abonements')
def abonements_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã'."""
    try:
        markup = types.InlineKeyboardMarkup()
        for abonement_id, abonement in products.ABONEMENTS.items():
            print(f"abonement_id: {abonement_id}, type: {type(abonement_id)}")
            btn = types.InlineKeyboardButton(abonement['name'], callback_data=f"selectabonement_{abonement_id}")
            markup.add(btn)
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back3")  # –í–æ–∑–≤—Ä–∞—Ç –∫ buying_handler
        markup.add(btn_back)

        utils.delete_message(call.message.chat.id, call.message.message_id)
        utils.send_and_save_message(call.message.chat.id, "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç:", reply_markup=markup,
                                    parse_mode="Markdown")
    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ abonements_handler: {e}", exc_info=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith('selectabonement_'))
def select_abonement_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º abonement_id –∏–∑ callback_data
        abonement_id = call.data.replace('selectabonement_', '')
        print(f"select_abonement_handler: abonement_id = {abonement_id}, type: {type(abonement_id)}")

        # –ü–æ–ª—É—á–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        abonement = products.ABONEMENTS.get(abonement_id)

        if abonement is None:
            utils.send_and_save_message(call.message.chat.id, "‚ùå –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")
            return

        user_id = call.from_user.id

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç: *{abonement['name']}*\n–¶–µ–Ω–∞: {abonement['price']} —Ä—É–±–ª–µ–π"
        markup = types.InlineKeyboardMarkup()
        btn_buy = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buyabonement_{abonement_id}")
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back6")
        markup.add(btn_buy, btn_back)

        utils.delete_message(call.message.chat.id, call.message.message_id)
        utils.send_and_save_message(call.message.chat.id, text, reply_markup=markup, parse_mode="Markdown")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ select_abonement_handler: {e}", exc_info=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith('buyabonement_'))
def buy_abonement_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    print("buy_abonement_handler called")  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try:
        abonement_id = call.data.replace('buyabonement_', '')
        user_id = call.from_user.id
        abonement = products.ABONEMENTS.get(abonement_id)

        if not abonement:
            utils.send_and_save_message(call.message.chat.id, "–û—à–∏–±–∫–∞:‚ùå –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = database.get_balance(user_id)
        if balance < abonement['price']:
            utils.send_and_save_message(call.message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
        success = database.update_balance(user_id, -abonement['price'], f"–ü–æ–∫—É–ø–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {abonement_id}")
        if not success:
            utils.send_and_save_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü—É user_subscriptions
        with db_lock:
            cursor = connection.cursor()
            end_date = f"datetime('now', '+{abonement.get('duration', 30)} days')"  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
            visits = abonement.get('visits')
            abonement_name = abonement['name']  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            is_training = False  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ is_training

            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π
            if visits:
                cursor.execute("""
                    INSERT INTO user_subscriptions (user_id, subscription_id, subscription_name, end_date, visits_left, is_training)
                    VALUES (?, ?, ?, """ + end_date + """, ?, ?)
                """, (user_id, abonement_id, abonement_name, visits, is_training))
            else:
                cursor.execute("""
                    INSERT INTO user_subscriptions (user_id, subscription_id, subscription_name, end_date, visits_left, is_training)
                    VALUES (?, ?, ?, """ + end_date + """, NULL, ?)
                """, (user_id, abonement_id, abonement_name, is_training))  # NULL –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö

            connection.commit()

            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
            markup = types.InlineKeyboardMarkup()
            utils.delete_message(call.message.chat.id, call.message.message_id)
            btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back2")
            markup.add(btn_back)
            utils.send_and_save_message(call.message.chat.id,
                                        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç *{abonement['name']}*!\n–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –æ—Å—Ç–∞–ª–æ—Å—å: {balance - abonement['price']}",
                                        reply_markup=markup, parse_mode="Markdown")

            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª –∞–±–æ–Ω–µ–º–µ–Ω—Ç {abonement_id}")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_abonement_handler: {e}", exc_info=True)



@bot.callback_query_handler(func=lambda call: call.data == 'history')
def show_history_handler(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_id = call.from_user.id
        transactions = database.get_transactions(user_id)

        if transactions:
            message_text = "üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n"
            for timestamp, type, amount, description in transactions:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã Markdown –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                description = description.replace("*", "\\*").replace("_", "\\_").replace("`", "\\`")
                message_text += f"- {timestamp}: {type} {amount} —Ä—É–±. ({description})\n"
        else:
            message_text = "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."

        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
        markup.add(btn_back)

        utils.delete_message(call.message.chat.id, call.message.message_id)
        utils.send_and_save_message(call.message.chat.id, message_text, reply_markup=markup, parse_mode="Markdown")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ show_history_handler: {e}", exc_info=True)
# –®–∞–≥ 3.1: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é add_balance –≤ database.py –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:

def update_balance(user_id, amount, description):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ transactions."""
    with db_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏
        try:
            cursor = connection.cursor()

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ transactions
            transaction_type = 'deposit' if amount > 0 else 'purchase'
            cursor.execute("""
                INSERT INTO transactions (user_id, type, amount, description)
                VALUES (?, ?, ?, ?)
            """, (user_id, transaction_type, amount, description))

            connection.commit()
            return True
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False


def check_balance(message, user_id):
    with db_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))

            balance = cursor.fetchone()
            connection.commit()
            bot.reply_to(message, f'üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance[0]}')

        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
            return False


def check_balance_CLI(user_id):
    with db_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))

            balance = cursor.fetchone()
            connection.commit()
            return (f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance[0]}')

        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
            return False


@bot.callback_query_handler(func=lambda call: call.data == 'balance')
def check_balance_call_handler(call):
    """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        user_id = call.from_user.id
        cursor = connection.cursor()
        cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = cursor.fetchone()

        if balance:
            markup = types.InlineKeyboardMarkup()
            btn_transactions = types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data="transactions") #–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="info")  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            markup.add(btn_transactions)
            markup.add(btn_back)
            utils.delete_message(call.message.chat.id, call.message.message_id)
            utils.send_and_save_message(call.message.chat.id, f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: `{balance[0]}`",
                                        reply_markup=markup, parse_mode="Markdown")
        else:
            utils.send_and_save_message(call.message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ.",
                                        parse_mode="Markdown")
    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ check_balance_call_handler: {e}", exc_info=True)


@bot.message_handler(commands=['check_user_abonement'])
def check_user_abonements_handler(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)."""
    try:
        user_id = message.from_user.id
        abonements = database.get_user_abonements(user_id)

        if abonements:
            message_text = "‚è≥ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã:\n"
            for abonement_id, end_date, visits_left in abonements:
                message_text += f"- {abonement_id} (–¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date}"
                if visits_left:
                    message_text += f", –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–µ—â–µ–Ω–∏–π: {visits_left}"
                message_text += ")\n"

            bot.send_message(message.chat.id, message_text)
        else:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ check_user_abonements_handler: {e}", exc_info=True)

@bot.callback_query_handler(func=lambda call: call.data == 'transactions')
def transactions_handler(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_id = call.from_user.id
        transactions = database.get_transactions(user_id)

        if transactions:
            message_text = "üí∞ *–ò—Å—Ç–æ—Ä–∏—è –í–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:*\n"
            current_message = ""
            for timestamp, type, amount, description in transactions:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                description = description.replace("*", "\\*").replace("_", "\\_").replace("`", "\\`").replace("[", "\\[").replace("]", "\\]").replace("(", "\\(").replace(")", "\\)")
                transaction_text = f"‚Ä¢ _–î–∞—Ç–∞:_ {timestamp}\n   _–¢–∏–ø:_ {type}\n   _–°—É–º–º–∞:_ {amount} —Ä—É–±.\n   _–û–ø–∏—Å–∞–Ω–∏–µ:_ {description}\n\n"

                # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                if len(current_message) + len(transaction_text) > 4096:
                    markup = types.InlineKeyboardMarkup()
                    btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='info')
                    markup.add(btn_back)
                    utils.delete_message(call.message.chat.id, call.message.message_id)
                    utils.send_and_save_message(call.message.chat.id, current_message, reply_markup=markup, parse_mode="Markdown")
                    current_message = ""  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                current_message += transaction_text

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
            if current_message:
                markup = types.InlineKeyboardMarkup()
                btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='info')
                markup.add(btn_back)
                utils.delete_message(call.message.chat.id, call.message.message_id)
                utils.send_and_save_message(call.message.chat.id, current_message, reply_markup=markup, parse_mode="Markdown")
        else:
            message_text = "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='info')
            markup.add(btn_back)
            utils.delete_message(call.message.chat.id, call.message.message_id)
            utils.send_and_save_message(call.message.chat.id, message_text, reply_markup=markup, parse_mode="Markdown")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ show_history_handler: {e}", exc_info=True)


@bot.callback_query_handler(func=lambda call: call.data == 'trainers')
def trainers_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤'."""
    try:
        chat_id = call.message.chat.id
        page_num = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        trainers = get_trainers_page(page_num)
        total_trainers = len(products.TRAINERS)
        total_pages = (total_trainers + TRAINERS_PER_PAGE - 1) // TRAINERS_PER_PAGE  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

        markup = types.InlineKeyboardMarkup()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥" –∏ "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if total_pages > 1:
            if page_num > 1:
                btn_prev = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'trainers_page_{page_num - 1}_{call.message.message_id}')
                markup.add(btn_prev)
            if page_num < total_pages:
                btn_next = types.InlineKeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data=f'trainers_page_{page_num + 1}_{call.message.message_id}')
                markup.add(btn_next)

        btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
        markup.add(btn_back)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(chat_id, call.message.message_id)
        except ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ trainers_handler: {e}")

        if trainers:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–Ω–µ—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º —Ç—Ä–µ–Ω–µ—Ä–µ
            trainer = trainers[0]
            trainer_text, trainer_photo = format_trainer(trainer) if trainer else (None, None) # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞

            if trainer_text and trainer_photo: #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
                with open(trainer_photo, 'rb') as photo:
                    bot.send_photo(chat_id, photo=photo, caption=trainer_text, parse_mode="HTML", reply_markup=markup)
            else:
                utils.send_and_save_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–∞.", reply_markup=markup, parse_mode="HTML")
        else:
            utils.send_and_save_message(chat_id, "‚ùå –ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=markup, parse_mode="HTML")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ trainers_handler: {e}", exc_info=True)

@bot.callback_query_handler(func=lambda call: call.data == 'abonements')
def abonements_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã'."""
    try:
        markup = types.InlineKeyboardMarkup()
        for abonement_id, abonement in products.ABONEMENTS.items():
            print(f"abonement_id: {abonement_id}, type: {type(abonement_id)}")
            btn = types.InlineKeyboardButton(abonement['name'], callback_data=f"selectabonement_{abonement_id}")
            markup.add(btn)
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back3")  # –í–æ–∑–≤—Ä–∞—Ç –∫ buying_handler
        markup.add(btn_back)

        utils.delete_message(call.message.chat.id, call.message.message_id)
        utils.send_and_save_message(call.message.chat.id, "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç:", reply_markup=markup,
                                    parse_mode="Markdown")
    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ abonements_handler: {e}", exc_info=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith('selecttraining_'))
def select_training_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º abonement_id –∏–∑ callback_data
        training_id = call.data.replace('selecttraining_', '')
        print(f"select_training_handler: training_id = {training_id}, type: {type(training_id)}")

        # –ü–æ–ª—É—á–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        training = products.TRAININGS.get(training_id)

        if training is None:
            utils.send_and_save_message(call.message.chat.id, "‚ùå –†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")
            return

        user_id = call.from_user.id

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç: *{training['name']}*\n–¶–µ–Ω–∞: {training['price']} —Ä—É–±–ª–µ–π"
        markup = types.InlineKeyboardMarkup()
        btn_buy = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buytraining_{training_id}")
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back6")
        markup.add(btn_buy, btn_back)

        utils.delete_message(call.message.chat.id, call.message.message_id)
        utils.send_and_save_message(call.message.chat.id, text, reply_markup=markup, parse_mode="Markdown")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ select_training_handler: {e}", exc_info=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('buytraining_'))
def buy_training_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è."""
    print("buy_training_handler called")  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try:
        training_id = call.data.replace('buytraining_', '')
        user_id = call.from_user.id
        training = products.TRAININGS.get(training_id)

        if not training:
            utils.send_and_save_message(call.message.chat.id, "‚ùå –†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = database.get_balance(user_id)
        if balance < training['price']:
            utils.send_and_save_message(call.message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
        success = database.update_balance(user_id, -training['price'], f"–ü–æ–∫—É–ø–∫–∞ –∑–∞–Ω—è—Ç–∏—è {training['name']}")
        if not success:
            utils.send_and_save_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É user_subscriptions
        with db_lock:
            cursor = connection.cursor()
            end_date = f"datetime('now', '+{training.get('duration', 30)} days')"  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
            visits = training.get('visits', 1) # –†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –æ–±—ã—á–Ω–æ 1 –ø–æ—Å–µ—â–µ–Ω–∏–µ
            training_name = training['name']

            cursor.execute("""
                INSERT INTO user_subscriptions (user_id, subscription_id, subscription_name, end_date, visits_left, is_training)
                VALUES (?, ?, ?, """ + end_date + """, ?, 1)  -- is_training = 1 –¥–ª—è —Ä–∞–∑–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π
            """, (user_id, training_id, training_name, visits))

            connection.commit()

            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
            markup = types.InlineKeyboardMarkup()
            utils.delete_message(call.message.chat.id, call.message.message_id)
            btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back2")
            markup.add(btn_back)
            utils.send_and_save_message(call.message.chat.id,
                                        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ *{training['name']}*!\n", #—É–±—Ä–∞–ª {balance - training['price']}
                                        reply_markup=markup, parse_mode="Markdown")

            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª —Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ {training_id}")

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_training_handler: {e}", exc_info=True)
    print("buy_training_handler finished")



@bot.callback_query_handler(func=lambda call: call.data.startswith('back'))
def back_navigation_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ '–ù–∞–∑–∞–¥'."""
    try:
        data = call.data
        chat_id = call.message.chat.id
        message_id = call.message.message_id

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(chat_id, message_id)
        except ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ back_navigation_handler: {e}")

        if data == 'back1':
            start_handler(call.message)
        elif data == 'back2':
            info_handler(call)
        elif data == 'back3':
            buying_handler(call)
        elif data == 'back6':
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            buying_handler(call)
        elif data == 'back7':
            account_handler(call)

    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ back_navigation_handler: {e}", exc_info=True)


@bot.message_handler(commands=[config.SECRET_COMMAND])
def show_users(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    try:
        if message.from_user.id in config.ADMIN_USER_ID:
            users = database.get_all_users()
            if users:
                output = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                for user in users:
                    output += f"ID: {user[0]}, Chat ID: {user[1]}, –ò–º—è: {user[2]}, –ë–∞–ª–∞–Ω—Å: {user[3]}\n"
            bot.send_message(message.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å.")
            print(output)
        else:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    except Exception as e:
        errors_logger.error(f"–û—à–∏–±–∫–∞ –≤ show_users: {e}", exc_info=True)


@bot.message_handler(commands=['products'])
def show_products(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ products.py."""
    try:
        text = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ products.py:\n\n"
        text += "ABONEMENTS:\n"
        for key, value in products.ABONEMENTS.items():
            text += f"  {key}: {value}\n"

        text += "\nTRAININGS:\n"

        text += "\nTRAINERS:\n"
        for key, value in products.TRAINERS.items():
            text += f"  {key}: {value}\n"

        bot.send_message(message.chat.id, text)

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
